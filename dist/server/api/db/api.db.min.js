import {sequelize} from"../../main.min.js";import{Song,Author,Selection}from"../../models/models.min.js";const getAllSongsInfoBy=async(e="",s="")=>{switch(s){case"":var t=await findAll(Song,getAttributesConstantsBy("song"),!0,!0,getIncludeConstantsBy("song"));return t.map((e,s,t)=>{delete e.album,delete e.author}),t;case"selectionId":case"search":var[t,,]=await seq.query(createSqlStringBy("song",e,s));return t;default:t=await findAll(Song,getAttributesConstantsBy("song",s),!0,!0,getIncludeConstantsBy("song",s),createWhereClauseObject("song","songId",e,s));return t.map((e,s,t)=>{delete e.album,delete e.author}),t}},getAllAlbumsInfoBy=async(e="",s="")=>{var t;return"authorId"===s?(t=await findAll(Album,getAttributesConstantsBy("album",s),!0,!0,getIncludeConstantsBy("album",s),createWhereClauseObject("album","albumId",e,s))).map((e,s,t)=>{delete e.song,delete e.genre}):(t=await findAll(Album,getAttributesConstantsBy("album"),!0,!0,getIncludeConstantsBy("album"))).map((e,s,t)=>delete e.song),t},getAllAuthorsInfoBy=async(e=0,s="")=>{if(""===s)return await findAll(Author,getAttributesConstantsBy("author"),!0,!0)},getAllSelectionsInfo=async(e=0,s="")=>{if(""===s)return await findAll(Selection,getAttributesConstantsBy("selection"),!0,!0)},getAllSongs=async()=>{var e=await Song.findAll({include:[{model:Author,as:"author"}],attributes:["songName","img","author.authorName"],raw:!0,nest:!0});return e.map((e,s,t)=>{delete e.author}),e},getAllSongsBySelectionIdOrSongName=async e=>{return await Song.findAll({where:{songId:seq.literal(`(SELECT selection_songs.songId from selection_songs WHERE selection_songs.selectionId = ${e}) = songs.id`)},include:[{model:Author,as:"author"}],attributes:["songName","img","author.authorName"]})},getAllSongsBySongName=async e=>{await Song.findAll({where:{songId:seq.literal(`(SELECT song.id from songs WHERE song.songName = ${e})`)},include:[{model:Author,as:"author"}],attributes:["songName","img","author.authorName"]})},findAll=async(e,s,t=!1,o=!1,n=[],a={})=>e.findAll({where:a,include:n,attributes:s,raw:t,nest:o}),add=async(e,s)=>(await e.create(s),!0);import{Album,Genre}from"../../models/models.min.js";import{Sequelize}from"sequelize";const getAttributesConstantsBy=(e,s="")=>{switch(e){case"song":return""!==s?["songName","img","author.authorName"]:["songName","img","releaseYear","album.albumName","album.albumRating","author.authorName","author.authorRating"];case"album":switch(s){case"authorId":return["albumName","albumRating","genre.genreName","song.img","song.releaseYear"];case"one":return["albumName","albumRating","song.songName","song.releaseYear"];default:return["albumName","song.img","song.releaseYear"]}case"author":return["authorName","authorImg"];case"selection":return["selectionName","selectionImg"];case"user":return[]}},getIncludeConstantsBy=(e,s="")=>{switch(e){case"song":return""!==s?[{model:Author,as:"author"}]:[{model:Album,as:"album"},{model:Author,as:"author"}];case"album":return"authorId"!==s?[{model:Song,as:"song"}]:[{model:Genre,as:"genre"},{model:Song,as:"song"}]}return[]},createWhereClauseObject=(e,s,t,o="")=>""!==o?{id:Sequelize.literal(createSqlStringBy(e,t,o))}:{},countOfTableRows=e=>`(SELECT MAX(id) FROM ${e})`,createSqlStringBy=(e,s,t)=>{switch(e){case"song":switch(t){case"albumId":return`(SELECT album_songs.songId from album_songs WHERE album_songs.albumId = ${s}) = songs.id`;case"selectionId":return`(SELECT authorName, songName, img from (SELECT authorId, songName, img from (SELECT songs.songName, songs.img, songs.id   from  (SELECT selection_songs.songId from selection_songs 
                            INNER JOIN author_songs on selection_songs.songId = author_songs.songId WHERE selection_songs.selectionId = ${s}) AS sel INNER JOIN songs on sel.songId = songs.id) AS sel_songs
                            INNER JOIN author_songs on sel_songs.id = author_songs.songId) AS sell INNER JOIN authors on sell.authorId = authors.id)`;case"search":return`(SELECT songName, img, authorName from (SELECT author_songs.authorId, songs.songName, songs.img from songs inner join author_songs on songs.id = author_songs.songId WHERE songs.songName = ${s}) as sell inner join authors on sell.authorId = authors.id)`}case"album":if("authorId"===t)return`(SELECT author_albums.albumId from author_albums WHERE author_albums.authorId = ${s}) = albums.id`}};export{getAllSongsInfoBy,getAllAlbumsInfoBy,getAllAuthorsInfoBy,getAllSelectionsInfo,getAllSongsBySongName,findAll,add,getAttributesConstantsBy,getIncludeConstantsBy,createWhereClauseObject,countOfTableRows,createSqlStringBy};
