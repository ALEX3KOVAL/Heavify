import{getAllAlbumsInfoBy}from"../db/models/api.db.models.min.js";import{getAttributesConstantsBy,getIncludeConstantsBy}from"../db/api.db.min.js";import{Album}from"../../models/models.min.js";const AlbumController=function(){};AlbumController.prototype.addAlbum=async(e,r)=>{var{name:e,rating:o}=e.body;return await Album.create({name:e,rating:o}),r.json({name:e,rating:o})},AlbumController.prototype.getAllAlbums=async(e,r)=>{e=e.query.authorId;if(!e){const o=await getAllAlbumsInfoBy();return r.json(o)}const o=await getAllAlbumsInfoBy(e,"authorId");return r.json(o)},AlbumController.prototype.getOneAlbum=async(e,r)=>{e=e.params.id,e=await Album.findOne({where:{id:e},include:getIncludeConstantsBy("album"),attributes:getAttributesConstantsBy("album","one"),raw:!0,nest:!0});return delete e.song,r.json(e)};import{getAllAuthorsInfoBy}from"../db/models/api.db.models.min.js";import{Author}from"../../models/models.min.js";const AuthorController=function(){};AuthorController.prototype.addAuthor=async(e,r)=>{var{name:e,rating:o}=e.body;return await Author.create({name:e,rating:o}),r.json({name:e,rating:o})},AuthorController.prototype.getAllAuthors=async(e,r)=>{var o=await getAllAuthorsInfoBy();return r.json(o)};const GenreController=function(){};GenreController.prototype.addGenre=async(e,r)=>{},GenreController.prototype.getAllGenres=async(e,r)=>{};import{ErrorAPI}from"../http/api.http.min.js";import{PictureService}from"../../service/services.min.js";const PictureController=function(){};PictureController.prototype.getPicturesGroupByNames=async(e,r,o)=>{var{pageName:e,componentType:t,componentName:n}=e.params;return e&&t?PictureService.getPicturesGroupByNames(e,t,r,n):o(ErrorAPI.notImplemented("Необходимо верные задать имя страницы и компонента"))},PictureController.prototype.getFoldersNamesBy=async(e,r,o)=>{var{pageName:e,componentType:t}=e.params;return e&&t?/^(?!.*header).+$/.test(t)?PictureService.getFoldersNamesBy(e,t,r):o("route"):o(ErrorAPI.notImplemented("Необходимо задать верные имя страницы и компонента"))};import{getAllSelectionsInfo}from"../db/models/api.db.models.min.js";const SelectionController=function(){};SelectionController.prototype.getAllSelections=async(e,r)=>{var o=await getAllSelectionsInfo();return r.json(o)};import{Song}from"../../models/models.min.js";import"../db/models/api.db.models.min.js";import{getAllSongsInfoBy}from"../db/models/api.db.models.min.js";import{v4}from"uuid";import{fileURLToPath}from"node:url";import path from"node:path";const __dirname=path.dirname(fileURLToPath(import.meta.url)),SongController=function(){};SongController.prototype.addSong=async(e,r,o)=>{try{var t=e.body["releaseYear"],n=e.files["imgFile"],s=v4()+".jpg",l=v4()+".mp3",a=(n.mv(path.resolve(__dirname,"../../../../assets","images",s)),await Song.create({songName:l,releaseYear:t,img:s}));return r.json(a)}catch(e){o(e)}},SongController.prototype.getAllSongs=async(e,r)=>{var o,{albumId:e,selectionId:t,search:n}=e.query;return Sound().play(path.resolve(__dirname,"../../../../assets","songs","67202b28-09ed-4762-a8b4-eb1d44beb88b.mp3")),e||t||n?e?(o=await getAllSongsInfoBy(e,"albumId"),r.json(o)):(e=t?await getAllSongsInfoBy(t,"selectionId"):await getAllSongsInfoBy(n,"search"),r.json(e)):(o=await getAllSongsInfoBy(),r.json(o))},SongController.prototype.getOneSong=async(e,r)=>{e=e.params.id,e=await Song.findOne({where:{id:e},include:getIncludeConstantsBy("song"),attributes:getAttributesConstantsBy("song"),raw:!0,nest:!0});return delete e.album,delete e.author,r.json(e)};import{UserService}from"../../service/services.min.js";import{validationResult}from"express-validator";const UserController=function(){};UserController.prototype.registration=async(e,r,o)=>{try{var t,n,s,l,a,i=validationResult(e);return i.isEmpty()?({userName:t,email:n,password:s,role:l}=e.body,console.log("userName --- ",t),a=await UserService.registration(t,n,s,l),r.cookie("refreshToken",a.refreshToken,{maxAge:process.env.JWT_REFRESH_EXPIRATION,httpOnly:!0}),r.json(a)):o(ErrorAPI.badRequest("Ошибка при валидации",i))}catch(e){return o(e)}},UserController.prototype.login=async(e,r,o)=>{try{var{email:t,password:n}=e.body,s=await UserService.login(t,n);return r.cookie("refreshToken",s.refreshToken,{maxAge:process.env.JWT_REFRESH_EXPIRATION,httpOnly:!0}),r.json({user:s.user,accessToken:s.accessToken})}catch(e){return o(e)}},UserController.prototype.activate=async(e,r,o)=>{try{var t=e.params.link;return await UserService.activate(t),r.redirect(process.env.CLIENT_URL)}catch(e){return o(e)}},UserController.prototype.logout=async(e,r,o)=>{try{var t=e.cookies["refreshToken"];return await UserService.logout(t),r.clearCookie("refreshToken"),r.status(success.STATUS).json("Выход из профиля прошёл успешно")}catch(e){return o(e)}},UserController.prototype.refresh=async(e,r,o)=>{try{var t=e.cookies["refreshToken"],n=await UserService.refresh(t);return r.cookie("refreshToken",n.refreshToken,{maxAge:process.env.JWT_REFRESH_EXPIRATION,httpOnly:!0}),r.json({user:n.user,accessToken:n.accessToken})}catch(e){return o(e)}};export{AlbumController,AuthorController,GenreController,PictureController,SelectionController,SongController,UserController};
