import{DATE,FLOAT,INTEGER,STRING,BOOLEAN}from"sequelize";import {sequelize} from"../main.min.js";import{v4}from"uuid";const Album=sequelize.define("albums",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},albumName:{type:STRING,unique:!0,notNull:!0},albumRating:{type:FLOAT,notNull:!0,defaultValue:0}},{timestamps:!1}),Author=sequelize.define("authors",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},authorName:{type:STRING,unique:!0,notNull:!0},authorRating:{type:FLOAT,notNull:!0,defaultValue:0},authorImg:{type:STRING,notNull:!0,defaultValue:"author_default.jpg"}},{timestamps:!1}),Genre=sequelize.define("genres",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},genreName:{type:STRING,unique:!0,notNull:!0}},{timestamps:!1}),RefreshToken=sequelize.define("refresh_tokens",{token:{type:STRING,notNull:!0},userId:{type:STRING,foreignKey:!0,unique:!0,references:{table:"users",field:"id",onDelete:"cascade",onUpdate:"cascade"}},expiryDate:{type:DATE,notNull:!0},isActivated:{type:BOOLEAN,defaultValue:!1},activationLink:{type:STRING}},{timestamps:!1}),Selection=(RefreshToken.createToken=async function(e,n){var t=new Date,n=(t.setSeconds(t.getSeconds()+Number(process.env.JWT_REFRESH_EXPIRATION)),void 0===n?v4():n);return(await this.create({userId:e,token:n,expiryDate:t.getTime()})).token},sequelize.define("selections",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},selectionName:{type:STRING,unique:!0,notNull:!0},selectionImg:{type:STRING,unique:!0,notNull:!0,defaultValue:"selection_default.jpg"}},{timestamps:!1})),Song=sequelize.define("songs",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},songName:{type:STRING,unique:!0,notNull:!0},img:{type:STRING,defaultValue:"image.png"},releaseYear:{type:STRING,defaultValue:"Unknown"}},{timestamps:!1}),User=sequelize.define("users",{id:{type:STRING,primaryKey:!0},userName:{type:STRING,unique:!0,notNull:!0},email:{type:STRING,unique:!0},phoneNumber:{type:STRING,unique:!0},password:{type:STRING,unique:!0,notNull:!0},role:{type:STRING,notNull:!0,defaultValue:"USER"},isActivated:{type:BOOLEAN,defaultValue:!1},activationLink:{type:STRING}},{timestamps:!1}),AlbumSong=(User.checkIsActivated=async function(e){return(await this.findOne({where:{email:e}}))?.isActivated},sequelize.define("album_songs",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},albumId:{type:INTEGER,foreignKey:!0,references:{table:"albums",field:"id",onDelete:"cascade",onUpdate:"cascade"}},songId:{type:INTEGER,foreignKey:!0,references:{table:"songs",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1})),AuthorAlbum=sequelize.define("author_albums",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},authorId:{type:INTEGER,foreignKey:!0,references:{table:"authors",field:"id",onDelete:"cascade",onUpdate:"cascade"}},albumId:{type:INTEGER,foreignKey:!0,references:{table:"albums",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1}),AuthorSong=sequelize.define("author_songs",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},authorId:{type:INTEGER,foreignKey:!0,references:{table:"authors",field:"id",onDelete:"cascade",onUpdate:"cascade"}},songId:{type:INTEGER,foreignKey:!0,references:{table:"songs",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1}),GenreAlbum=sequelize.define("genre_albums",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},genreId:{type:INTEGER,foreignKey:!0,references:{table:"genres",field:"id",onDelete:"cascade",onUpdate:"cascade"}},albumId:{type:INTEGER,foreignKey:!0,references:{table:"albums",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1}),GenreSong=sequelize.define("genre_songs",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},genreId:{type:INTEGER,foreignKey:!0,references:{table:"genres",field:"id",onDelete:"cascade",onUpdate:"cascade"}},songId:{type:INTEGER,foreignKey:!0,references:{table:"songs",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1}),SelectionSong=sequelize.define("selection_songs",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},selectionId:{type:INTEGER,foreignKey:!0,references:{table:"selections",field:"id",onDelete:"cascade",onUpdate:"cascade"}},songId:{type:INTEGER,foreignKey:!0,references:{table:"songs",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1}),UserSong=sequelize.define("user_songs",{id:{type:INTEGER,primaryKey:!0,autoIncrement:!0},userId:{type:STRING,foreignKey:!0,references:{table:"users",field:"id",onDelete:"cascade",onUpdate:"cascade"}},songId:{type:INTEGER,foreignKey:!0,references:{table:"songs",field:"id",onDelete:"cascade",onUpdate:"cascade"}}},{timestamps:!1});User.belongsToMany(Song,{through:UserSong,as:"song"}),Song.belongsToMany(User,{through:UserSong,as:"user"}),Song.hasOne(AlbumSong,{foreignKey:"songId"}),Album.belongsToMany(Song,{through:AlbumSong,as:"song"}),Song.belongsToMany(Album,{through:AlbumSong,as:"album"}),Genre.belongsToMany(Album,{through:GenreAlbum,as:"album"}),Album.belongsToMany(Genre,{through:GenreAlbum,as:"genre"}),Author.belongsToMany(Album,{through:AuthorAlbum,as:"album"}),Album.belongsToMany(Author,{through:AuthorAlbum,as:"author"}),Selection.belongsToMany(Song,{through:SelectionSong,as:"song"}),Song.belongsToMany(Selection,{through:SelectionSong,as:"selection"}),Genre.belongsToMany(Song,{through:GenreSong,as:"song"}),Song.belongsToMany(Genre,{through:GenreSong,as:"genre"}),Author.belongsToMany(Song,{through:AuthorSong,as:"song"}),Song.belongsToMany(Author,{through:AuthorSong,as:"author"}),User.hasOne(RefreshToken,{foreignKey:"userId"});export{Album,Author,Genre,RefreshToken,Selection,Song,User,AlbumSong,AuthorAlbum,AuthorSong,GenreAlbum,GenreSong,SelectionSong,UserSong};
