import{createTransport}from"nodemailer";const MailService=function(){this.transporter=createTransport({host:process.env.SMTP_HOST,port:process.env.SMTP_PORT,secure:!0,auth:{user:process.env.SMTP_USER,pass:process.env.SMTP_PASSWORD},from:process.env.SMTP_USER})};MailService.prototype.sendActivationMessage=async function(e,r){await this.transporter.sendMail({from:process.env.SMTP_USER,to:e,subject:"Активация аккаунта на http://localhost:3000",text:`Для активации перейдите по ссылке ${r}.Если вы не регистрировали аккаунт на heavify.ru - просто проигнорируйте данное письмо.`},(e,r)=>{e&&console.log(e.message)})};import{readdir}from"fs";import{ErrorAPI}from"../api/http/api.http.min.js";const PictureService=function(){};PictureService.prototype.getPicturesGroupByNames=async(o,t,s,i)=>{let a={filesNames:[""]};await readdir(`../../assets/images/${o}_page/${t}/`+(i||""),async(e,r)=>{if(e)throw ErrorAPI.identify(e);if(console.log(r),a.filesNames=(2<r.length?r.sort((e,r)=>Number(e.slice(e.lastIndexOf("_")+1,e.lastIndexOf(".")))>Number(r.slice(r.lastIndexOf("_")+1,r.lastIndexOf(".")))?1:-1):r).filter(e=>"clay"!==e),"carousel"!==t)return s.json(a.filesNames[0]);await readdir(`../../assets/images/${o}_page/${t}/${i}/clay`,(e,r)=>{if(e)throw ErrorAPI.identify(e);return a.clay=r[0],s.json(a)})})},PictureService.prototype.getFoldersNamesBy=async(e,r,o)=>{await readdir(`../../assets/images/${e}_page/${r}/`,(e,r)=>{if(e)throw ErrorAPI.identify(e);return console.log("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ ---- ",r),o.json({componentsNames:r})})};import Index from"jsonwebtoken";import{RefreshToken}from"../models/models.min.js";const TokenService=function(){};TokenService.prototype.generateTokens=async e=>{return{accessToken:Index.sign(e,process.env.JWT_ACCESS_SECRET_KEY,{expiresIn:process.env.JWT_ACCESS_EXPIRATION}),refreshToken:Index.sign(e,process.env.JWT_REFRESH_SECRET_KEY,{expiresIn:process.env.JWT_REFRESH_EXPIRATION})}},TokenService.prototype.saveToken=async(e,r)=>{var o=await RefreshToken.findOne({where:{userId:e}});return o?(o.token=r,await RefreshToken.update({token:r},{where:{userId:e}}),o):(console.log("created refreshToken --- ",r),RefreshToken.createToken(e,r))},TokenService.prototype.removeToken=async e=>RefreshToken.destroy({where:{token:e}}),TokenService.prototype.validateAccessToken=async e=>{try{return Index.verify(e,process.env.JWT_ACCESS_SECRET_KEY)}catch(e){throw ErrorAPI.identify(e)}},TokenService.prototype.validateRefreshToken=async e=>{try{return Index.verify(e,process.env.JWT_REFRESH_SECRET_KEY)}catch(e){throw ErrorAPI.unauthorized("Обновляющий токен неверен")}},TokenService.prototype.findToken=async e=>{if(await RefreshToken.findOne({where:{token:e}}))return!0;throw ErrorAPI.unauthorized("Обновляющий токен не найден")};import{User}from"../models/models.min.js";import bcrypt from"bcrypt";import{v4}from"uuid";import UserDTO from"../dtos/dtos.min.js";import{incrementRowsCount}from"../main.min.js";const UserService=function(){},refresh=(UserService.prototype.registration=async(e,r,o,t="USER")=>{let s="";if(r||(s+="Некорректный логин\n"),!o)throw ErrorAPI.badRequest(s+"Некорректный пароль");if(await User.findOne({where:{email:r}}))throw ErrorAPI.conflict("Пользователь с таким логином/паролем уже существует");var o=await bcrypt.hash(o,3),i=v4(),a=await incrementRowsCount(),a=await User.create({id:a,userName:e,email:r,role:t,password:o,activationLink:i});try{await(new MailService).sendActivationMessage(r,process.env.API_URL+"/consts/users/activate/"+i);var n=new UserDTO(a),c=await TokenService.generateTokens({...n});return await TokenService.saveToken(a.id,c.refreshToken),{...c,user:n}}catch(e){throw e}},UserService.prototype.activate=async e=>{e=await User.findOne({where:{activationLink:e}});if(!e)throw ErrorAPI.badRequest("Некорректная ссылка активации");e.isActivated=!0,await e.save()},UserService.prototype.login=async(e,r)=>{var o,e=await User.findOne({where:{email:e}});if(!e)throw ErrorAPI.badRequest("Пользователь с таким email не найден");if(await bcrypt.compare(r,e.password))return r=new UserDTO(e),o=await TokenService.generateTokens({...r}),await TokenService.saveToken(e.id,o.refreshToken),{...o,user:r};throw ErrorAPI.badRequest("Неверный пароль")},UserService.prototype.logout=async e=>TokenService.removeToken(e),async e=>{if(!e)throw ErrorAPI.badRequest("Укажите обновляющий токен");try{var r=await TokenService.validateRefreshToken(e),o=(await TokenService.findToken(e),await User.findOne({where:{id:r.id}})),t=new UserDTO(o),s=await TokenService.generateTokens({...t});return await TokenService.saveToken(t.id,s.refreshToken),{...s,user:t}}catch(e){throw ErrorAPI.identify(e)}});UserService.prototype.checkActivated=async e=>{if(!e)throw ErrorAPI.badRequest("Укажите почту!");e=await User.checkIsActivated(e);if(void 0===e)throw ErrorAPI.unauthorized("Такой email не зарегистрирован");if(e)return e;throw ErrorAPI.unauthorized("Активируйте свой аккаунт")};export{MailService,PictureService,TokenService,UserService};
