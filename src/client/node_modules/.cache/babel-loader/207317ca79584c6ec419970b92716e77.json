{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getPicturesGroupByNames } from \"@/http/api/picture\";\nexport default {\n  name: \"carousel\",\n  props: {\n    height: {\n      type: String,\n      required: true\n    },\n    componentName: {\n      type: String,\n      required: true\n    },\n    pageName: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      drawer: true,\n      presentationCarouselSlides: {\n        filesNames: [\"\"],\n        clay: \"\"\n      }\n    };\n  },\n\n  async created() {\n    this.API_URL = process.env.VUE_APP_API_URL;\n    await getPicturesGroupByNames(this.pageName, \"carousel\", this.componentName).then(data => {\n      this.presentationCarouselSlides = data.filesNames;\n      console.log(this.presentationCarouselSlides);\n      this.$emit(\"clayIsLoaded\", data.clay);\n    });\n  },\n\n  computed: {\n    setWidth() {\n      const w = this.$vuetify.breakpoint.width,\n            h = this.$vuetify.breakpoint.height;\n      console.log(this.$vuetify.breakpoint.name);\n\n      if (h > w) {\n        switch (this.$vuetify.breakpoint.name) {\n          case \"xs\":\n          case \"sm\":\n          case \"md\":\n            return w * 0.9;\n\n          default:\n            return w * 0.5;\n        }\n      } else {\n        return w * 0.55;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AAEA;EACAA,gBADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,YADA;MAEAC;IAFA;EATA,CAFA;;EAgBAG;IACA;MACAC,YADA;MAEAC;QACAC,gBADA;QAEAC;MAFA;IAFA;EAOA,CAxBA;;EAyBA;IACA;IACA,6EACAC,IADA,CACAL;MACA;MACAM;MACA;IACA,CALA;EAMA,CAjCA;;EAkCAC;IACAC;MACA;MAAA,MACAC,mCADA;MAEAH;;MACA;QACA;UACA;UACA;UACA;YACA;;UACA;YACA;QANA;MAQA,CATA,MAUA;QACA;MACA;IACA;;EAlBA;AAlCA","names":["name","props","height","type","required","componentName","pageName","data","drawer","presentationCarouselSlides","filesNames","clay","then","console","computed","setWidth","h"],"sourceRoot":"src/components/carousels","sources":["Carousel.vue"],"sourcesContent":["<template>\r\n  <v-container\r\n    class=\"carousel\"\r\n    :style=\"`width: ${setWidth}px;height:${height};`\"\r\n  >\r\n      <v-card\r\n        class=\"carousel__wrapper rounded-xl\"\r\n      >\r\n        <v-carousel\r\n          v-if=\"presentationCarouselSlides.filesNames.length !== 0\"\r\n          interval=\"5000\"\r\n          cycle\r\n          continuous\r\n          hide-delimiter-background\r\n          delimiter-icon=\"mdi-guitar-pick\"\r\n          show-arrows-on-hover\r\n          :style=\"`width: ${setWidth}px;`\"\r\n          :height=\"height\"\r\n        >\r\n          <v-carousel-item\r\n              v-for=\"(slide, i) in presentationCarouselSlides\"\r\n              :key=\"i\"\r\n              :src=\"`${API_URL}/${pageName}_page/carousel/${componentName}/${slide}`\"\r\n          >\r\n          </v-carousel-item>\r\n        </v-carousel>\r\n      </v-card>\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\nimport {getPicturesGroupByNames} from \"@/http/api/picture\";\r\n\r\nexport default {\r\n  name: \"carousel\",\r\n  props: {\r\n    height: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    componentName: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    pageName: {\r\n      type: String,\r\n      required: true\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      drawer: true,\r\n      presentationCarouselSlides: {\r\n        filesNames: [\"\"],\r\n        clay: \"\"\r\n      },\r\n    }\r\n  },\r\n  async created() {\r\n    this.API_URL = process.env.VUE_APP_API_URL;\r\n    await getPicturesGroupByNames(this.pageName, \"carousel\", this.componentName)\r\n        .then((data) => {\r\n          this.presentationCarouselSlides = data.filesNames;\r\n          console.log(this.presentationCarouselSlides);\r\n          this.$emit(\"clayIsLoaded\", data.clay);\r\n        });\r\n  },\r\n  computed: {\r\n    setWidth() {\r\n      const w = this.$vuetify.breakpoint.width,\r\n          h = this.$vuetify.breakpoint.height;\r\n      console.log(this.$vuetify.breakpoint.name);\r\n      if (h > w) {\r\n        switch (this.$vuetify.breakpoint.name) {\r\n          case \"xs\":\r\n          case \"sm\":\r\n          case \"md\":\r\n            return w * 0.9;\r\n          default:\r\n            return w * 0.5;\r\n        }\r\n      }\r\n      else {\r\n        return w * 0.55;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n"]},"metadata":{},"sourceType":"module"}