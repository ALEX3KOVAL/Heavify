{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TheAuthorizationButtonMenu from \"@/components/heading/authrozationButtonMenu/TheAuthorizationButtonMenu.vue\";\nimport TheHeadingButton from \"@/components/heading/TheHeadingButton.vue\";\nimport { keyCodes } from \"vuetify/lib/util/helpers\";\nimport ClickOutside from \"vuetify/lib/directives/click-outside/index\";\nimport Menuable from \"vuetify/lib/mixins/menuable/index\";\nimport Activatable from \"vuetify/lib/mixins/activatable/index.js\";\n/********************************************************\r\n\r\n    -  АДАПТИРОВАТЬ ПОД РАЗНЫЕ РАЗМЕРЫ ОКНА МЕНЮ АВТОРИЗАЦИИ\r\n    -  Создать компонент кнопки регистрации/логина (один компонент, ему передаётся имя кнопки в props,\r\n в дочернем компоненте есть метод, который в зависимости от имени кнопки переходит на определённую страницу (такое можно сделать через switch))\r\n    -  Создать компонент меню авторизации (регистрация либо логин), который будет отрисовывать в v-for кнопки\r\n (используя prop \"is\" можно будет указать название компонента кнопки и отрисовать), здесь же указывается что делать при событии @click на кнопку\r\n\r\n\r\n ********************************************************/\n\nexport default {\n  components: {\n    TheHeadingButton,\n    TheAuthorizationButtonMenu\n  },\n  directives: {\n    ClickOutside\n  },\n  data: () => ({\n    navigationPanelVisible: false,\n    authorizationButtonMenuVisible: false,\n    closeOnClick: {\n      type: Boolean,\n      default: true\n    },\n    closeOnContentClick: {\n      type: Boolean,\n      default: true\n    }\n  }),\n  computed: {\n    iconsSize() {\n      console.log(this.$vuetify.breakpoint);\n\n      switch (this.$vuetify.breakpoint.name) {\n        case 'xs':\n          return 13;\n\n        case 'sm':\n          return 18;\n\n        case 'md':\n          return 22;\n\n        case 'lg':\n          return 20;\n\n        case 'xl':\n          return 30;\n      }\n    }\n\n  },\n  methods: {\n    initHeight() {\n      let currentWidth = this.$vuetify.breakpoint.width;\n      let currentHeight = this.$vuetify.breakpoint.height;\n      let difference;\n\n      if (currentWidth >= currentHeight) {\n        difference = currentWidth / currentHeight + .7;\n        return currentHeight / difference;\n      } else {\n        difference = currentHeight / currentWidth + 1.5;\n        return currentWidth / difference;\n      }\n    },\n\n    onAuthorizationButtonClick() {\n      this.authorizationButtonMenuVisible = !this.authorizationButtonMenuVisible;\n    },\n\n    closeConditional(e) {\n      const target = e.target;\n      return this.authorizationButtonMenuVisible && !this._isDestroyed && this.closeOnClick && !this.$refs.content.contains(target);\n    },\n\n    onKeyDown(e) {\n      if (e.keyCode === keyCodes.esc) {\n        // Wait for dependent elements to close first\n        setTimeout(() => {\n          this.authorizationButtonMenuVisible = false;\n        });\n        const activator = this.getActivator();\n        this.$nextTick(() => activator && activator.focus());\n      } else if (!this.authorizationButtonMenuVisible && [keyCodes.up, keyCodes.down].includes(e.keyCode)) {\n        this.authorizationButtonMenuVisible = true;\n      } // Allow for authorizationButtonMenuVisible watcher to generate tile list\n\n\n      this.$nextTick(() => this.changeListIndex(e));\n    },\n\n    genActivatorAttributes() {\n      const attributes = Activatable.options.methods.genActivatorAttributes.call(this);\n\n      if (this.activeTile && this.activeTile.id) {\n        return { ...attributes,\n          'aria-activedescendant': this.activeTile.id\n        };\n      }\n\n      return attributes;\n    },\n\n    genActivatorListeners() {\n      const listeners = Menuable.options.methods.genActivatorListeners.call(this);\n\n      if (!this.disableKeys) {\n        listeners.keydown = this.onKeyDown;\n      }\n\n      return listeners;\n    },\n\n    genDirectives() {\n      const directives = [{\n        name: 'show',\n        value: this.isContentActive\n      }]; // Do not add click outside for hover menu\n\n      if (!this.openOnHover && this.closeOnClick) {\n        directives.push({\n          name: 'click-outside',\n          value: {\n            handler: () => {\n              this.authorizationButtonMenuVisible = false;\n            },\n            closeConditional: this.closeConditional,\n            include: () => [this.$el, ...this.getOpenDependentElements()]\n          }\n        });\n      }\n\n      return directives;\n    },\n\n    genContent() {\n      const options = {\n        attrs: { ...this.getScopeIdAttrs(),\n          role: 'role' in this.$attrs ? this.$attrs.role : 'menu'\n        },\n        staticClass: 'v-menu__content',\n        class: { ...this.rootThemeClasses,\n          ...this.roundedClasses,\n          'v-menu__content--auto': this.auto,\n          'v-menu__content--fixed': this.activatorFixed,\n          menuable__content__active: this.authorizationButtonMenuVisible,\n          [this.contentClass.trim()]: true\n        },\n        directives: this.genDirectives(),\n        ref: 'content',\n        on: {\n          click: e => {\n            const target = e.target;\n            if (target.getAttribute('disabled')) return;\n            if (this.closeOnContentClick) this.authorizationButtonMenuVisible = false;\n          },\n          keydown: this.onKeyDown\n        }\n      };\n\n      if (this.$listeners.scroll) {\n        options.on = options.on || {};\n        options.on.scroll = this.$listeners.scroll;\n      }\n\n      if (!this.disabled && this.openOnHover) {\n        options.on = options.on || {};\n        options.on.mouseenter = this.mouseEnterHandler;\n      }\n\n      if (this.openOnHover) {\n        options.on = options.on || {};\n        options.on.mouseleave = this.mouseLeaveHandler;\n      }\n\n      return this.$createElement('div', options, this.getContentSlot());\n    },\n\n    onMenuButtonClick() {\n      this.navigationPanelVisible = !this.navigationPanelVisible;\n    }\n\n  }\n};","map":{"version":3,"mappings":";AAgEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;EACAA;IAAAC;IAAAC;EAAA,CADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACAC,6BADA;IAEAC,qCAFA;IAGAC;MACAC,aADA;MAEAC;IAFA,CAHA;IAOAC;MACAF,aADA;MAEAC;IAFA;EAPA,EALA;EAiBAE;IACAC;MACAC;;MACA;QACA;UAAA;;QACA;UAAA;;QACA;UAAA;;QACA;UAAA;;QACA;UAAA;MALA;IAOA;;EAVA,CAjBA;EA6BAC;IACAC;MACA;MACA;MACA;;MACA;QACAC;QACA;MACA,CAHA,MAIA;QACAA;QACA;MACA;IACA,CAbA;;IAcAC;MACA;IACA,CAhBA;;IAiBAC;MACA;MACA;IACA,CApBA;;IAqBAC;MACA;QACA;QACAC;UACA;QACA,CAFA;QAGA;QACA;MACA,CAPA,MAOA;QACA;MACA,CAVA,CAUA;;;MAGA;IACA,CAnCA;;IAoCAC;MACA;;MAEA;QACA;UACA;QADA;MAGA;;MAEA;IACA,CA9CA;;IAgDAC;MACA;;MAEA;QACAC;MACA;;MAEA;IACA,CAxDA;;IAyDAC;MACA;QACAC,YADA;QAEAC;MAFA,GADA,CAIA;;MAEA;QACAxB;UACAuB,qBADA;UAEAC;YACAC;cACA;YACA,CAHA;YAIAT,uCAJA;YAKAU;UALA;QAFA;MAUA;;MAEA;IACA,CA7EA;;IA8EAC;MACA;QACAC;UACAC;QADA,CADA;QAIAC,8BAJA;QAKAC;UACA,sBADA;UAEA,kCAFA;UAGA,6CAHA;UAIAC,8DAJA;UAKA;QALA,CALA;QAYAhC,gCAZA;QAaAiC,cAbA;QAcAC;UACAC;YACA;YACA;YACA;UACA,CALA;UAMAC;QANA;MAdA;;MAuBA;QACAC;QACAA;MACA;;MAEA;QACAA;QACAA;MACA;;MAEA;QACAA;QACAA;MACA;;MAEA;IACA,CAtHA;;IAuHAC;MACA;IACA;;EAzHA;AA7BA","names":["components","TheHeadingButton","TheAuthorizationButtonMenu","directives","ClickOutside","data","navigationPanelVisible","authorizationButtonMenuVisible","closeOnClick","type","default","closeOnContentClick","computed","iconsSize","console","methods","initHeight","difference","onAuthorizationButtonClick","closeConditional","onKeyDown","setTimeout","genActivatorAttributes","genActivatorListeners","listeners","genDirectives","name","value","handler","include","genContent","attrs","role","staticClass","class","menuable__content__active","ref","on","click","keydown","options","onMenuButtonClick"],"sourceRoot":"src/components/heading","sources":["TheHeading.vue"],"sourcesContent":["<template>\r\n  <header>\r\n    <v-app-bar\r\n        fixed\r\n        dark\r\n        dense\r\n        style=\"background: linear-gradient(to right, rgba(44, 4, 106), rgb(196,26,143))\"\r\n        shrink-on-scroll\r\n        :height=\"`${initHeight()}px`\"\r\n        src='../../../../../assets/images/header.png'\r\n        scroll-target=\"#scrolling-techniques-2\"\r\n        fade-img-on-scroll\r\n        app\r\n    >\r\n      <v-row class=\"d-flex justify-center\">\r\n      <the-heading-button\r\n        :icons-size=\"iconsSize\"\r\n        :icon-name=\"`mdi-menu`\"\r\n        @menuButtonWasClicked=\"onMenuButtonClick\"\r\n      />\r\n      <v-toolbar-title class=\"header__title\">\r\n        Heavify\r\n      </v-toolbar-title>\r\n      <v-spacer></v-spacer>\r\n      <the-authorization-button-menu v-if=\"authorizationButtonMenuVisible\" :icons-size=\"iconsSize\"/>\r\n      <the-heading-button\r\n          :icons-size=\"iconsSize\"\r\n          :icon-name=\"`mdi-login-variant`\"\r\n          @authorizationButtonWasClicked=\"onAuthorizationButtonClick\"\r\n      />\r\n      </v-row>\r\n    </v-app-bar>\r\n    <v-navigation-drawer\r\n        v-model=\"navigationPanelVisible\"\r\n        absolute\r\n        temporary\r\n        color=\"secondary\"\r\n    >\r\n      <v-list\r\n          nav\r\n          dense\r\n      >\r\n        <v-list-item-group active-class=\"deep-purple--text text--accent-4\">\r\n          <v-list-item>\r\n            <v-list-item-icon>\r\n              <v-icon>mdi-home</v-icon>\r\n            </v-list-item-icon>\r\n            <v-list-item-title>Home</v-list-item-title>\r\n          </v-list-item>\r\n\r\n          <v-list-item>\r\n            <v-list-item-icon>\r\n              <v-icon>mdi-account</v-icon>\r\n            </v-list-item-icon>\r\n            <v-list-item-title>Account</v-list-item-title>\r\n          </v-list-item>\r\n        </v-list-item-group>\r\n      </v-list>\r\n    </v-navigation-drawer>\r\n  </header>\r\n</template>\r\n\r\n<script>\r\n\r\nimport TheAuthorizationButtonMenu from \"@/components/heading/authrozationButtonMenu/TheAuthorizationButtonMenu.vue\";\r\nimport TheHeadingButton from \"@/components/heading/TheHeadingButton.vue\";\r\nimport {keyCodes} from \"vuetify/lib/util/helpers\";\r\nimport ClickOutside from \"vuetify/lib/directives/click-outside/index\"\r\nimport Menuable from \"vuetify/lib/mixins/menuable/index\";\r\nimport Activatable from \"vuetify/lib/mixins/activatable/index.js\";\r\n/********************************************************\r\n\r\n    -  АДАПТИРОВАТЬ ПОД РАЗНЫЕ РАЗМЕРЫ ОКНА МЕНЮ АВТОРИЗАЦИИ\r\n    -  Создать компонент кнопки регистрации/логина (один компонент, ему передаётся имя кнопки в props,\r\n в дочернем компоненте есть метод, который в зависимости от имени кнопки переходит на определённую страницу (такое можно сделать через switch))\r\n    -  Создать компонент меню авторизации (регистрация либо логин), который будет отрисовывать в v-for кнопки\r\n (используя prop \"is\" можно будет указать название компонента кнопки и отрисовать), здесь же указывается что делать при событии @click на кнопку\r\n\r\n\r\n ********************************************************/\r\n\r\nexport default {\r\n  components: {TheHeadingButton, TheAuthorizationButtonMenu},\r\n  directives: {\r\n    ClickOutside\r\n  },\r\n  data: () => ({\r\n    navigationPanelVisible: false,\r\n    authorizationButtonMenuVisible: false,\r\n    closeOnClick: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    closeOnContentClick: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n  }),\r\n  computed: {\r\n    iconsSize() {\r\n      console.log(this.$vuetify.breakpoint);\r\n      switch (this.$vuetify.breakpoint.name) {\r\n        case 'xs': return 13;\r\n        case 'sm': return 18;\r\n        case 'md': return 22;\r\n        case 'lg': return 20;\r\n        case 'xl': return 30;\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    initHeight() {\r\n      let currentWidth = this.$vuetify.breakpoint.width;\r\n      let currentHeight = this.$vuetify.breakpoint.height;\r\n      let difference;\r\n      if (currentWidth >= currentHeight) {\r\n        difference = (currentWidth / currentHeight + .7);\r\n        return currentHeight / (difference);\r\n      }\r\n      else {\r\n        difference = (currentHeight / currentWidth + 1.5);\r\n        return currentWidth / difference;\r\n      }\r\n    },\r\n    onAuthorizationButtonClick() {\r\n      this.authorizationButtonMenuVisible = !this.authorizationButtonMenuVisible\r\n    },\r\n    closeConditional(e) {\r\n      const target = e.target;\r\n      return this.authorizationButtonMenuVisible && !this._isDestroyed && this.closeOnClick && !this.$refs.content.contains(target);\r\n    },\r\n    onKeyDown(e) {\r\n      if (e.keyCode === keyCodes.esc) {\r\n        // Wait for dependent elements to close first\r\n        setTimeout(() => {\r\n          this.authorizationButtonMenuVisible = false;\r\n        });\r\n        const activator = this.getActivator();\r\n        this.$nextTick(() => activator && activator.focus());\r\n      } else if (!this.authorizationButtonMenuVisible && [keyCodes.up, keyCodes.down].includes(e.keyCode)) {\r\n        this.authorizationButtonMenuVisible = true;\r\n      } // Allow for authorizationButtonMenuVisible watcher to generate tile list\r\n\r\n\r\n      this.$nextTick(() => this.changeListIndex(e));\r\n    },\r\n    genActivatorAttributes() {\r\n      const attributes = Activatable.options.methods.genActivatorAttributes.call(this);\r\n\r\n      if (this.activeTile && this.activeTile.id) {\r\n        return { ...attributes,\r\n          'aria-activedescendant': this.activeTile.id\r\n        };\r\n      }\r\n\r\n      return attributes;\r\n    },\r\n\r\n    genActivatorListeners() {\r\n      const listeners = Menuable.options.methods.genActivatorListeners.call(this);\r\n\r\n      if (!this.disableKeys) {\r\n        listeners.keydown = this.onKeyDown;\r\n      }\r\n\r\n      return listeners;\r\n    },\r\n    genDirectives() {\r\n      const directives = [{\r\n        name: 'show',\r\n        value: this.isContentActive\r\n      }]; // Do not add click outside for hover menu\r\n\r\n      if (!this.openOnHover && this.closeOnClick) {\r\n        directives.push({\r\n          name: 'click-outside',\r\n          value: {\r\n            handler: () => {\r\n              this.authorizationButtonMenuVisible = false;\r\n            },\r\n            closeConditional: this.closeConditional,\r\n            include: () => [this.$el, ...this.getOpenDependentElements()]\r\n          }\r\n        });\r\n      }\r\n\r\n      return directives;\r\n    },\r\n    genContent() {\r\n      const options = {\r\n        attrs: { ...this.getScopeIdAttrs(),\r\n          role: 'role' in this.$attrs ? this.$attrs.role : 'menu'\r\n        },\r\n        staticClass: 'v-menu__content',\r\n        class: { ...this.rootThemeClasses,\r\n          ...this.roundedClasses,\r\n          'v-menu__content--auto': this.auto,\r\n          'v-menu__content--fixed': this.activatorFixed,\r\n          menuable__content__active: this.authorizationButtonMenuVisible,\r\n          [this.contentClass.trim()]: true\r\n        },\r\n        directives: this.genDirectives(),\r\n        ref: 'content',\r\n        on: {\r\n          click: e => {\r\n            const target = e.target;\r\n            if (target.getAttribute('disabled')) return;\r\n            if (this.closeOnContentClick) this.authorizationButtonMenuVisible = false;\r\n          },\r\n          keydown: this.onKeyDown\r\n        }\r\n      };\r\n      if (this.$listeners.scroll) {\r\n        options.on = options.on || {};\r\n        options.on.scroll = this.$listeners.scroll;\r\n      }\r\n\r\n      if (!this.disabled && this.openOnHover) {\r\n        options.on = options.on || {};\r\n        options.on.mouseenter = this.mouseEnterHandler;\r\n      }\r\n\r\n      if (this.openOnHover) {\r\n        options.on = options.on || {};\r\n        options.on.mouseleave = this.mouseLeaveHandler;\r\n      }\r\n\r\n      return this.$createElement('div', options, this.getContentSlot());\r\n    },\r\n    onMenuButtonClick() {\r\n      this.navigationPanelVisible = !this.navigationPanelVisible;\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}